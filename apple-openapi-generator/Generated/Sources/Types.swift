// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
internal protocol APIProtocol: Sendable {
    /// Get a list of train stations
    ///
    /// Returns a paginated and searchable list of all train stations.
    ///
    /// - Remark: HTTP `GET /stations`.
    /// - Remark: Generated from `#/paths//stations/get(get-stations)`.
    func getStations(_ input: Operations.GetStations.Input) async throws -> Operations.GetStations.Output
    /// Get available train trips
    ///
    /// Returns a list of available train trips between the specified origin and destination stations on the given date, and allows for filtering by bicycle and dog allowances.
    ///
    ///
    /// - Remark: HTTP `GET /trips`.
    /// - Remark: Generated from `#/paths//trips/get(get-trips)`.
    func getTrips(_ input: Operations.GetTrips.Input) async throws -> Operations.GetTrips.Output
    /// List existing bookings
    ///
    /// Returns a list of all trip bookings by the authenticated user.
    ///
    /// - Remark: HTTP `GET /bookings`.
    /// - Remark: Generated from `#/paths//bookings/get(get-bookings)`.
    func getBookings(_ input: Operations.GetBookings.Input) async throws -> Operations.GetBookings.Output
    /// Create a booking
    ///
    /// A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
    ///
    /// - Remark: HTTP `POST /bookings`.
    /// - Remark: Generated from `#/paths//bookings/post(create-booking)`.
    func createBooking(_ input: Operations.CreateBooking.Input) async throws -> Operations.CreateBooking.Output
    /// Get a booking
    ///
    /// Returns the details of a specific booking.
    ///
    /// - Remark: HTTP `GET /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)`.
    func getBooking(_ input: Operations.GetBooking.Input) async throws -> Operations.GetBooking.Output
    /// Delete a booking
    ///
    /// Deletes a booking, cancelling the hold on the trip.
    ///
    /// - Remark: HTTP `DELETE /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)`.
    func deleteBooking(_ input: Operations.DeleteBooking.Input) async throws -> Operations.DeleteBooking.Output
    /// Pay for a Booking
    ///
    /// A payment is an attempt to pay for the booking, which will confirm the booking for the user and enable them to get their tickets.
    ///
    /// - Remark: HTTP `POST /bookings/{bookingId}/payment`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)`.
    func createBookingPayment(_ input: Operations.CreateBookingPayment.Input) async throws -> Operations.CreateBookingPayment.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get a list of train stations
    ///
    /// Returns a paginated and searchable list of all train stations.
    ///
    /// - Remark: HTTP `GET /stations`.
    /// - Remark: Generated from `#/paths//stations/get(get-stations)`.
    internal func getStations(
        query: Operations.GetStations.Input.Query = .init(),
        headers: Operations.GetStations.Input.Headers = .init()
    ) async throws -> Operations.GetStations.Output {
        try await getStations(Operations.GetStations.Input(
            query: query,
            headers: headers
        ))
    }
    /// Get available train trips
    ///
    /// Returns a list of available train trips between the specified origin and destination stations on the given date, and allows for filtering by bicycle and dog allowances.
    ///
    ///
    /// - Remark: HTTP `GET /trips`.
    /// - Remark: Generated from `#/paths//trips/get(get-trips)`.
    internal func getTrips(
        query: Operations.GetTrips.Input.Query,
        headers: Operations.GetTrips.Input.Headers = .init()
    ) async throws -> Operations.GetTrips.Output {
        try await getTrips(Operations.GetTrips.Input(
            query: query,
            headers: headers
        ))
    }
    /// List existing bookings
    ///
    /// Returns a list of all trip bookings by the authenticated user.
    ///
    /// - Remark: HTTP `GET /bookings`.
    /// - Remark: Generated from `#/paths//bookings/get(get-bookings)`.
    internal func getBookings(
        query: Operations.GetBookings.Input.Query = .init(),
        headers: Operations.GetBookings.Input.Headers = .init()
    ) async throws -> Operations.GetBookings.Output {
        try await getBookings(Operations.GetBookings.Input(
            query: query,
            headers: headers
        ))
    }
    /// Create a booking
    ///
    /// A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
    ///
    /// - Remark: HTTP `POST /bookings`.
    /// - Remark: Generated from `#/paths//bookings/post(create-booking)`.
    internal func createBooking(
        headers: Operations.CreateBooking.Input.Headers = .init(),
        body: Operations.CreateBooking.Input.Body
    ) async throws -> Operations.CreateBooking.Output {
        try await createBooking(Operations.CreateBooking.Input(
            headers: headers,
            body: body
        ))
    }
    /// Get a booking
    ///
    /// Returns the details of a specific booking.
    ///
    /// - Remark: HTTP `GET /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)`.
    internal func getBooking(
        path: Operations.GetBooking.Input.Path,
        headers: Operations.GetBooking.Input.Headers = .init()
    ) async throws -> Operations.GetBooking.Output {
        try await getBooking(Operations.GetBooking.Input(
            path: path,
            headers: headers
        ))
    }
    /// Delete a booking
    ///
    /// Deletes a booking, cancelling the hold on the trip.
    ///
    /// - Remark: HTTP `DELETE /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)`.
    internal func deleteBooking(
        path: Operations.DeleteBooking.Input.Path,
        headers: Operations.DeleteBooking.Input.Headers = .init()
    ) async throws -> Operations.DeleteBooking.Output {
        try await deleteBooking(Operations.DeleteBooking.Input(
            path: path,
            headers: headers
        ))
    }
    /// Pay for a Booking
    ///
    /// A payment is an attempt to pay for the booking, which will confirm the booking for the user and enable them to get their tickets.
    ///
    /// - Remark: HTTP `POST /bookings/{bookingId}/payment`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)`.
    internal func createBookingPayment(
        path: Operations.CreateBookingPayment.Input.Path,
        headers: Operations.CreateBookingPayment.Input.Headers = .init(),
        body: Operations.CreateBookingPayment.Input.Body
    ) async throws -> Operations.CreateBookingPayment.Output {
        try await createBookingPayment(Operations.CreateBookingPayment.Input(
            path: path,
            headers: headers,
            body: body
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
internal enum Servers {
    /// Mock Server
    internal enum Server1 {
        /// Mock Server
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://try.microcks.io/rest/Train+Travel+API/1.0.0",
                variables: []
            )
        }
    }
    /// Mock Server
    @available(*, deprecated, renamed: "Servers.Server1.url")
    internal static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://try.microcks.io/rest/Train+Travel+API/1.0.0",
            variables: []
        )
    }
    /// Production
    internal enum Server2 {
        /// Production
        internal static func url() throws -> Foundation.URL {
            try Foundation.URL(
                validatingOpenAPIServerURL: "https://api.example.com",
                variables: []
            )
        }
    }
    /// Production
    @available(*, deprecated, renamed: "Servers.Server2.url")
    internal static func server2() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://api.example.com",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
internal enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    internal enum Schemas {
        /// A train station.
        ///
        /// - Remark: Generated from `#/components/schemas/Station`.
        internal struct Station: Codable, Hashable, Sendable {
            /// Unique identifier for the station.
            ///
            /// - Remark: Generated from `#/components/schemas/Station/id`.
            internal var id: Swift.String
            /// The name of the station
            ///
            /// - Remark: Generated from `#/components/schemas/Station/name`.
            internal var name: Swift.String
            /// The address of the station.
            ///
            /// - Remark: Generated from `#/components/schemas/Station/address`.
            internal var address: Swift.String
            /// The country code of the station.
            ///
            /// - Remark: Generated from `#/components/schemas/Station/country_code`.
            internal var countryCode: Swift.String
            /// The timezone of the station in the [IANA Time Zone Database format](https://www.iana.org/time-zones).
            ///
            /// - Remark: Generated from `#/components/schemas/Station/timezone`.
            internal var timezone: Swift.String?
            /// Creates a new `Station`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the station.
            ///   - name: The name of the station
            ///   - address: The address of the station.
            ///   - countryCode: The country code of the station.
            ///   - timezone: The timezone of the station in the [IANA Time Zone Database format](https://www.iana.org/time-zones).
            internal init(
                id: Swift.String,
                name: Swift.String,
                address: Swift.String,
                countryCode: Swift.String,
                timezone: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.address = address
                self.countryCode = countryCode
                self.timezone = timezone
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case name
                case address
                case countryCode = "country_code"
                case timezone
            }
        }
        /// The link to the current resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Links-Self`.
        internal struct LinksSelf: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links-Self/self`.
            internal var _self: Swift.String?
            /// Creates a new `LinksSelf`.
            ///
            /// - Parameters:
            ///   - _self:
            internal init(_self: Swift.String? = nil) {
                self._self = _self
            }
            internal enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// The link to the destination station resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Links-Destination`.
        internal struct LinksDestination: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links-Destination/self`.
            internal var _self: Swift.String?
            /// Creates a new `LinksDestination`.
            ///
            /// - Parameters:
            ///   - _self:
            internal init(_self: Swift.String? = nil) {
                self._self = _self
            }
            internal enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// The link to the origin station resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Links-Origin`.
        internal struct LinksOrigin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links-Origin/self`.
            internal var _self: Swift.String?
            /// Creates a new `LinksOrigin`.
            ///
            /// - Parameters:
            ///   - _self:
            internal init(_self: Swift.String? = nil) {
                self._self = _self
            }
            internal enum CodingKeys: String, CodingKey {
                case _self = "self"
            }
        }
        /// Links to the next and previous pages of a paginated response.
        ///
        /// - Remark: Generated from `#/components/schemas/Links-Pagination`.
        internal struct LinksPagination: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links-Pagination/next`.
            internal var next: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Links-Pagination/prev`.
            internal var prev: Swift.String?
            /// Creates a new `LinksPagination`.
            ///
            /// - Parameters:
            ///   - next:
            ///   - prev:
            internal init(
                next: Swift.String? = nil,
                prev: Swift.String? = nil
            ) {
                self.next = next
                self.prev = prev
            }
            internal enum CodingKeys: String, CodingKey {
                case next
                case prev
            }
        }
        /// A problem detail object as defined in RFC 7807.
        ///
        /// - Remark: Generated from `#/components/schemas/Problem`.
        internal struct Problem: Codable, Hashable, Sendable {
            /// A URI reference that identifies the problem type
            ///
            /// - Remark: Generated from `#/components/schemas/Problem/type`.
            internal var _type: Swift.String?
            /// A short, human-readable summary of the problem type
            ///
            /// - Remark: Generated from `#/components/schemas/Problem/title`.
            internal var title: Swift.String?
            /// A human-readable explanation specific to this occurrence of the problem
            ///
            /// - Remark: Generated from `#/components/schemas/Problem/detail`.
            internal var detail: Swift.String?
            /// A URI reference that identifies the specific occurrence of the problem
            ///
            /// - Remark: Generated from `#/components/schemas/Problem/instance`.
            internal var instance: Swift.String?
            /// The HTTP status code
            ///
            /// - Remark: Generated from `#/components/schemas/Problem/status`.
            internal var status: Swift.Int?
            /// Creates a new `Problem`.
            ///
            /// - Parameters:
            ///   - _type: A URI reference that identifies the problem type
            ///   - title: A short, human-readable summary of the problem type
            ///   - detail: A human-readable explanation specific to this occurrence of the problem
            ///   - instance: A URI reference that identifies the specific occurrence of the problem
            ///   - status: The HTTP status code
            internal init(
                _type: Swift.String? = nil,
                title: Swift.String? = nil,
                detail: Swift.String? = nil,
                instance: Swift.String? = nil,
                status: Swift.Int? = nil
            ) {
                self._type = _type
                self.title = title
                self.detail = detail
                self.instance = instance
                self.status = status
            }
            internal enum CodingKeys: String, CodingKey {
                case _type = "type"
                case title
                case detail
                case instance
                case status
            }
        }
        /// A train trip.
        ///
        /// - Remark: Generated from `#/components/schemas/Trip`.
        internal struct Trip: Codable, Hashable, Sendable {
            /// Unique identifier for the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/id`.
            internal var id: Swift.String?
            /// The starting station of the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/origin`.
            internal var origin: Swift.String?
            /// The destination station of the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/destination`.
            internal var destination: Swift.String?
            /// The date and time when the trip departs
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/departure_time`.
            internal var departureTime: Foundation.Date?
            /// The date and time when the trip arrives
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/arrival_time`.
            internal var arrivalTime: Foundation.Date?
            /// The name of the operator of the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/operator`.
            internal var _operator: Swift.String?
            /// The cost of the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/price`.
            internal var price: Swift.Double?
            /// Indicates whether bicycles are allowed on the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/bicycles_allowed`.
            internal var bicyclesAllowed: Swift.Bool?
            /// Indicates whether dogs are allowed on the trip
            ///
            /// - Remark: Generated from `#/components/schemas/Trip/dogs_allowed`.
            internal var dogsAllowed: Swift.Bool?
            /// Creates a new `Trip`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the trip
            ///   - origin: The starting station of the trip
            ///   - destination: The destination station of the trip
            ///   - departureTime: The date and time when the trip departs
            ///   - arrivalTime: The date and time when the trip arrives
            ///   - _operator: The name of the operator of the trip
            ///   - price: The cost of the trip
            ///   - bicyclesAllowed: Indicates whether bicycles are allowed on the trip
            ///   - dogsAllowed: Indicates whether dogs are allowed on the trip
            internal init(
                id: Swift.String? = nil,
                origin: Swift.String? = nil,
                destination: Swift.String? = nil,
                departureTime: Foundation.Date? = nil,
                arrivalTime: Foundation.Date? = nil,
                _operator: Swift.String? = nil,
                price: Swift.Double? = nil,
                bicyclesAllowed: Swift.Bool? = nil,
                dogsAllowed: Swift.Bool? = nil
            ) {
                self.id = id
                self.origin = origin
                self.destination = destination
                self.departureTime = departureTime
                self.arrivalTime = arrivalTime
                self._operator = _operator
                self.price = price
                self.bicyclesAllowed = bicyclesAllowed
                self.dogsAllowed = dogsAllowed
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case origin
                case destination
                case departureTime = "departure_time"
                case arrivalTime = "arrival_time"
                case _operator = "operator"
                case price
                case bicyclesAllowed = "bicycles_allowed"
                case dogsAllowed = "dogs_allowed"
            }
        }
        /// A booking for a train trip.
        ///
        /// - Remark: Generated from `#/components/schemas/Booking`.
        internal struct Booking: Codable, Hashable, Sendable {
            /// Unique identifier for the booking
            ///
            /// - Remark: Generated from `#/components/schemas/Booking/id`.
            internal var id: Swift.String?
            /// Identifier of the booked trip
            ///
            /// - Remark: Generated from `#/components/schemas/Booking/trip_id`.
            internal var tripId: Swift.String?
            /// Name of the passenger
            ///
            /// - Remark: Generated from `#/components/schemas/Booking/passenger_name`.
            internal var passengerName: Swift.String?
            /// Indicates whether the passenger has a bicycle.
            ///
            /// - Remark: Generated from `#/components/schemas/Booking/has_bicycle`.
            internal var hasBicycle: Swift.Bool?
            /// Indicates whether the passenger has a dog.
            ///
            /// - Remark: Generated from `#/components/schemas/Booking/has_dog`.
            internal var hasDog: Swift.Bool?
            /// Creates a new `Booking`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the booking
            ///   - tripId: Identifier of the booked trip
            ///   - passengerName: Name of the passenger
            ///   - hasBicycle: Indicates whether the passenger has a bicycle.
            ///   - hasDog: Indicates whether the passenger has a dog.
            internal init(
                id: Swift.String? = nil,
                tripId: Swift.String? = nil,
                passengerName: Swift.String? = nil,
                hasBicycle: Swift.Bool? = nil,
                hasDog: Swift.Bool? = nil
            ) {
                self.id = id
                self.tripId = tripId
                self.passengerName = passengerName
                self.hasBicycle = hasBicycle
                self.hasDog = hasDog
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case tripId = "trip_id"
                case passengerName = "passenger_name"
                case hasBicycle = "has_bicycle"
                case hasDog = "has_dog"
            }
        }
        /// This is a generic request/response wrapper which contains both data and links which serve as hypermedia controls (HATEOAS).
        ///
        /// - Remark: Generated from `#/components/schemas/Wrapper-Collection`.
        internal struct WrapperCollection: Codable, Hashable, Sendable {
            /// The wrapper for a collection is an array of objects.
            ///
            /// - Remark: Generated from `#/components/schemas/Wrapper-Collection/data`.
            internal var data: [OpenAPIRuntime.OpenAPIObjectContainer]?
            /// A set of hypermedia links which serve as controls for the client.
            ///
            /// - Remark: Generated from `#/components/schemas/Wrapper-Collection/links`.
            internal var links: OpenAPIRuntime.OpenAPIObjectContainer?
            /// Creates a new `WrapperCollection`.
            ///
            /// - Parameters:
            ///   - data: The wrapper for a collection is an array of objects.
            ///   - links: A set of hypermedia links which serve as controls for the client.
            internal init(
                data: [OpenAPIRuntime.OpenAPIObjectContainer]? = nil,
                links: OpenAPIRuntime.OpenAPIObjectContainer? = nil
            ) {
                self.data = data
                self.links = links
            }
            internal enum CodingKeys: String, CodingKey {
                case data
                case links
            }
        }
        /// A payment for a booking.
        ///
        /// - Remark: Generated from `#/components/schemas/BookingPayment`.
        internal struct BookingPayment: Codable, Hashable, Sendable {
            /// Unique identifier for the payment. This will be a unique identifier for the payment, and is used to reference the payment in other objects.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/id`.
            internal var id: Swift.String?
            /// Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/amount`.
            internal var amount: Swift.Double?
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/currency`.
            internal enum CurrencyPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case bam = "bam"
                case bgn = "bgn"
                case chf = "chf"
                case eur = "eur"
                case gbp = "gbp"
                case nok = "nok"
                case sek = "sek"
                case _try = "try"
            }
            /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/currency`.
            internal var currency: Components.Schemas.BookingPayment.CurrencyPayload?
            /// The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/source`.
            internal enum SourcePayload: Codable, Hashable, Sendable {
                /// A card (debit or credit) to take payment from.
                ///
                /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1`.
                internal struct Case1Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/object`.
                    internal enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case card = "card"
                    }
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/object`.
                    internal var object: Components.Schemas.BookingPayment.SourcePayload.Case1Payload.ObjectPayload?
                    /// Cardholder's full name as it appears on the card.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/name`.
                    internal var name: Swift.String
                    /// The card number, as a string without any separators. On read all but the last four digits will be masked for security.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/number`.
                    internal var number: Swift.String
                    /// Card security code, 3 or 4 digits usually found on the back of the card.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/cvc`.
                    internal var cvc: Swift.String
                    /// Two-digit number representing the card's expiration month.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/exp_month`.
                    internal var expMonth: Swift.Int64
                    /// Four-digit number representing the card's expiration year.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/exp_year`.
                    internal var expYear: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/address_line1`.
                    internal var addressLine1: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/address_line2`.
                    internal var addressLine2: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/address_city`.
                    internal var addressCity: Swift.String?
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/address_country`.
                    internal var addressCountry: Swift.String
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1/address_post_code`.
                    internal var addressPostCode: Swift.String?
                    /// Creates a new `Case1Payload`.
                    ///
                    /// - Parameters:
                    ///   - object:
                    ///   - name: Cardholder's full name as it appears on the card.
                    ///   - number: The card number, as a string without any separators. On read all but the last four digits will be masked for security.
                    ///   - cvc: Card security code, 3 or 4 digits usually found on the back of the card.
                    ///   - expMonth: Two-digit number representing the card's expiration month.
                    ///   - expYear: Four-digit number representing the card's expiration year.
                    ///   - addressLine1:
                    ///   - addressLine2:
                    ///   - addressCity:
                    ///   - addressCountry:
                    ///   - addressPostCode:
                    internal init(
                        object: Components.Schemas.BookingPayment.SourcePayload.Case1Payload.ObjectPayload? = nil,
                        name: Swift.String,
                        number: Swift.String,
                        cvc: Swift.String,
                        expMonth: Swift.Int64,
                        expYear: Swift.Int64,
                        addressLine1: Swift.String? = nil,
                        addressLine2: Swift.String? = nil,
                        addressCity: Swift.String? = nil,
                        addressCountry: Swift.String,
                        addressPostCode: Swift.String? = nil
                    ) {
                        self.object = object
                        self.name = name
                        self.number = number
                        self.cvc = cvc
                        self.expMonth = expMonth
                        self.expYear = expYear
                        self.addressLine1 = addressLine1
                        self.addressLine2 = addressLine2
                        self.addressCity = addressCity
                        self.addressCountry = addressCountry
                        self.addressPostCode = addressPostCode
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case object
                        case name
                        case number
                        case cvc
                        case expMonth = "exp_month"
                        case expYear = "exp_year"
                        case addressLine1 = "address_line1"
                        case addressLine2 = "address_line2"
                        case addressCity = "address_city"
                        case addressCountry = "address_country"
                        case addressPostCode = "address_post_code"
                    }
                }
                /// A card (debit or credit) to take payment from.
                ///
                /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case1`.
                case case1(Components.Schemas.BookingPayment.SourcePayload.Case1Payload)
                /// A bank account to take payment from. Must be able to make payments in the currency specified in the payment.
                ///
                /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2`.
                internal struct Case2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/object`.
                    internal enum ObjectPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case bankAccount = "bank_account"
                    }
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/object`.
                    internal var object: Components.Schemas.BookingPayment.SourcePayload.Case2Payload.ObjectPayload?
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/name`.
                    internal var name: Swift.String
                    /// The account number for the bank account, in string form. Must be a current account.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/number`.
                    internal var number: Swift.String
                    /// The sort code for the bank account, in string form. Must be a six-digit number.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/sort_code`.
                    internal var sortCode: Swift.String?
                    /// The type of entity that holds the account. This can be either `individual` or `company`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/account_type`.
                    internal enum AccountTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case individual = "individual"
                        case company = "company"
                    }
                    /// The type of entity that holds the account. This can be either `individual` or `company`.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/account_type`.
                    internal var accountType: Components.Schemas.BookingPayment.SourcePayload.Case2Payload.AccountTypePayload
                    /// The name of the bank associated with the routing number.
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/bank_name`.
                    internal var bankName: Swift.String
                    /// Two-letter country code (ISO 3166-1 alpha-2).
                    ///
                    /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2/country`.
                    internal var country: Swift.String
                    /// Creates a new `Case2Payload`.
                    ///
                    /// - Parameters:
                    ///   - object:
                    ///   - name:
                    ///   - number: The account number for the bank account, in string form. Must be a current account.
                    ///   - sortCode: The sort code for the bank account, in string form. Must be a six-digit number.
                    ///   - accountType: The type of entity that holds the account. This can be either `individual` or `company`.
                    ///   - bankName: The name of the bank associated with the routing number.
                    ///   - country: Two-letter country code (ISO 3166-1 alpha-2).
                    internal init(
                        object: Components.Schemas.BookingPayment.SourcePayload.Case2Payload.ObjectPayload? = nil,
                        name: Swift.String,
                        number: Swift.String,
                        sortCode: Swift.String? = nil,
                        accountType: Components.Schemas.BookingPayment.SourcePayload.Case2Payload.AccountTypePayload,
                        bankName: Swift.String,
                        country: Swift.String
                    ) {
                        self.object = object
                        self.name = name
                        self.number = number
                        self.sortCode = sortCode
                        self.accountType = accountType
                        self.bankName = bankName
                        self.country = country
                    }
                    internal enum CodingKeys: String, CodingKey {
                        case object
                        case name
                        case number
                        case sortCode = "sort_code"
                        case accountType = "account_type"
                        case bankName = "bank_name"
                        case country
                    }
                }
                /// A bank account to take payment from. Must be able to make payments in the currency specified in the payment.
                ///
                /// - Remark: Generated from `#/components/schemas/BookingPayment/source/case2`.
                case case2(Components.Schemas.BookingPayment.SourcePayload.Case2Payload)
                internal init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .case1(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .case2(try .init(from: decoder))
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                internal func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .case1(value):
                        try value.encode(to: encoder)
                    case let .case2(value):
                        try value.encode(to: encoder)
                    }
                }
            }
            /// The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/source`.
            internal var source: Components.Schemas.BookingPayment.SourcePayload?
            /// The status of the payment, one of `pending`, `succeeded`, or `failed`.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/status`.
            internal enum StatusPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case pending = "pending"
                case succeeded = "succeeded"
                case failed = "failed"
            }
            /// The status of the payment, one of `pending`, `succeeded`, or `failed`.
            ///
            /// - Remark: Generated from `#/components/schemas/BookingPayment/status`.
            internal var status: Components.Schemas.BookingPayment.StatusPayload?
            /// Creates a new `BookingPayment`.
            ///
            /// - Parameters:
            ///   - id: Unique identifier for the payment. This will be a unique identifier for the payment, and is used to reference the payment in other objects.
            ///   - amount: Amount intended to be collected by this payment. A positive decimal figure describing the amount to be collected.
            ///   - currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
            ///   - source: The payment source to take the payment from. This can be a card or a bank account. Some of these properties will be hidden on read to protect PII leaking.
            ///   - status: The status of the payment, one of `pending`, `succeeded`, or `failed`.
            internal init(
                id: Swift.String? = nil,
                amount: Swift.Double? = nil,
                currency: Components.Schemas.BookingPayment.CurrencyPayload? = nil,
                source: Components.Schemas.BookingPayment.SourcePayload? = nil,
                status: Components.Schemas.BookingPayment.StatusPayload? = nil
            ) {
                self.id = id
                self.amount = amount
                self.currency = currency
                self.source = source
                self.status = status
            }
            internal enum CodingKeys: String, CodingKey {
                case id
                case amount
                case currency
                case source
                case status
            }
        }
        /// The link to the booking resource.
        ///
        /// - Remark: Generated from `#/components/schemas/Links-Booking`.
        internal struct LinksBooking: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Links-Booking/booking`.
            internal var booking: Swift.String?
            /// Creates a new `LinksBooking`.
            ///
            /// - Parameters:
            ///   - booking:
            internal init(booking: Swift.String? = nil) {
                self.booking = booking
            }
            internal enum CodingKeys: String, CodingKey {
                case booking
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    internal enum Parameters {
        /// The page number to return
        ///
        /// - Remark: Generated from `#/components/parameters/page`.
        internal typealias Page = Swift.Int
        /// The number of items to return per page
        ///
        /// - Remark: Generated from `#/components/parameters/limit`.
        internal typealias Limit = Swift.Int
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    internal enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    internal enum Responses {
        internal struct BadRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/BadRequest/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/BadRequest/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.BadRequest.Headers
            /// - Remark: Generated from `#/components/responses/BadRequest/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/BadRequest/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.BadRequest.Body
            /// Creates a new `BadRequest`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.BadRequest.Headers = .init(),
                body: Components.Responses.BadRequest.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct Conflict: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Conflict/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/Conflict/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.Conflict.Headers
            /// - Remark: Generated from `#/components/responses/Conflict/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Conflict/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/Conflict/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Conflict.Body
            /// Creates a new `Conflict`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.Conflict.Headers = .init(),
                body: Components.Responses.Conflict.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct Forbidden: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Forbidden/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/Forbidden/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.Forbidden.Headers
            /// - Remark: Generated from `#/components/responses/Forbidden/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Forbidden/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/Forbidden/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Forbidden.Body
            /// Creates a new `Forbidden`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.Forbidden.Headers = .init(),
                body: Components.Responses.Forbidden.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct InternalServerError: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/InternalServerError/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/InternalServerError/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.InternalServerError.Headers
            /// - Remark: Generated from `#/components/responses/InternalServerError/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/InternalServerError/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/InternalServerError/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.InternalServerError.Body
            /// Creates a new `InternalServerError`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.InternalServerError.Headers = .init(),
                body: Components.Responses.InternalServerError.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct NotFound: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/NotFound/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/NotFound/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.NotFound.Headers
            /// - Remark: Generated from `#/components/responses/NotFound/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/NotFound/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.NotFound.Body
            /// Creates a new `NotFound`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.NotFound.Headers = .init(),
                body: Components.Responses.NotFound.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct TooManyRequests: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/TooManyRequests/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/TooManyRequests/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// The Retry-After header indicates how long the user agent should wait before making a follow-up request. 
                /// The value is in seconds and can be an integer or a date in the future. 
                /// If the value is an integer, it indicates the number of seconds to wait. 
                /// If the value is a date, it indicates the time at which the user agent should make a follow-up request. 
                ///
                ///
                /// - Remark: Generated from `#/components/responses/TooManyRequests/headers/Retry-After`.
                internal var retryAfter: Components.Headers.RetryAfter?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                ///   - retryAfter: The Retry-After header indicates how long the user agent should wait before making a follow-up request. 
                internal init(
                    rateLimit: Components.Headers.RateLimit? = nil,
                    retryAfter: Components.Headers.RetryAfter? = nil
                ) {
                    self.rateLimit = rateLimit
                    self.retryAfter = retryAfter
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.TooManyRequests.Headers
            /// - Remark: Generated from `#/components/responses/TooManyRequests/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/TooManyRequests/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/TooManyRequests/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.TooManyRequests.Body
            /// Creates a new `TooManyRequests`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.TooManyRequests.Headers = .init(),
                body: Components.Responses.TooManyRequests.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal struct Unauthorized: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Unauthorized/headers`.
            internal struct Headers: Sendable, Hashable {
                /// The RateLimit header communicates quota policies. It contains a `limit` to
                /// convey the expiring limit, `remaining` to convey the remaining quota units,
                /// and `reset` to convey the time window reset time.
                ///
                ///
                /// - Remark: Generated from `#/components/responses/Unauthorized/headers/RateLimit`.
                internal var rateLimit: Components.Headers.RateLimit?
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                internal init(rateLimit: Components.Headers.RateLimit? = nil) {
                    self.rateLimit = rateLimit
                }
            }
            /// Received HTTP response headers
            internal var headers: Components.Responses.Unauthorized.Headers
            /// - Remark: Generated from `#/components/responses/Unauthorized/content`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/problem+json`.
                case applicationProblemJson(Components.Schemas.Problem)
                /// The associated value of the enum case if `self` is `.applicationProblemJson`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemJson`.
                /// - SeeAlso: `.applicationProblemJson`.
                internal var applicationProblemJson: Components.Schemas.Problem {
                    get throws {
                        switch self {
                        case let .applicationProblemJson(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+json",
                                body: self
                            )
                        }
                    }
                }
                /// - Remark: Generated from `#/components/responses/Unauthorized/content/application\/problem+xml`.
                case applicationProblemXml(OpenAPIRuntime.HTTPBody)
                /// The associated value of the enum case if `self` is `.applicationProblemXml`.
                ///
                /// - Throws: An error if `self` is not `.applicationProblemXml`.
                /// - SeeAlso: `.applicationProblemXml`.
                internal var applicationProblemXml: OpenAPIRuntime.HTTPBody {
                    get throws {
                        switch self {
                        case let .applicationProblemXml(body):
                            return body
                        default:
                            try throwUnexpectedResponseBody(
                                expectedContent: "application/problem+xml",
                                body: self
                            )
                        }
                    }
                }
            }
            /// Received HTTP response body
            internal var body: Components.Responses.Unauthorized.Body
            /// Creates a new `Unauthorized`.
            ///
            /// - Parameters:
            ///   - headers: Received HTTP response headers
            ///   - body: Received HTTP response body
            internal init(
                headers: Components.Responses.Unauthorized.Headers = .init(),
                body: Components.Responses.Unauthorized.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    internal enum Headers {
        /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
        /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
        ///
        ///
        /// - Remark: Generated from `#/components/headers/Cache-Control`.
        internal typealias CacheControl = Swift.String
        /// The RateLimit header communicates quota policies. It contains a `limit` to
        /// convey the expiring limit, `remaining` to convey the remaining quota units,
        /// and `reset` to convey the time window reset time.
        ///
        ///
        /// - Remark: Generated from `#/components/headers/RateLimit`.
        internal typealias RateLimit = Swift.String
        /// The Retry-After header indicates how long the user agent should wait before making a follow-up request. 
        /// The value is in seconds and can be an integer or a date in the future. 
        /// If the value is an integer, it indicates the number of seconds to wait. 
        /// If the value is a date, it indicates the time at which the user agent should make a follow-up request. 
        ///
        ///
        /// - Remark: Generated from `#/components/headers/Retry-After`.
        internal typealias RetryAfter = Swift.String
    }
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
internal enum Operations {
    /// Get a list of train stations
    ///
    /// Returns a paginated and searchable list of all train stations.
    ///
    /// - Remark: HTTP `GET /stations`.
    /// - Remark: Generated from `#/paths//stations/get(get-stations)`.
    internal enum GetStations {
        internal static let id: Swift.String = "get-stations"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/stations/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The page number to return
                ///
                /// - Remark: Generated from `#/paths/stations/GET/query/page`.
                internal var page: Components.Parameters.Page?
                /// The number of items to return per page
                ///
                /// - Remark: Generated from `#/paths/stations/GET/query/limit`.
                internal var limit: Components.Parameters.Limit?
                /// The latitude and longitude of the user's location, to narrow down the search results to sites within a proximity of this location.
                ///
                ///
                /// - Remark: Generated from `#/paths/stations/GET/query/coordinates`.
                internal var coordinates: Swift.String?
                /// A search term to filter the list of stations by name or address.
                ///
                ///
                /// - Remark: Generated from `#/paths/stations/GET/query/search`.
                internal var search: Swift.String?
                /// Filter stations by country code
                ///
                /// - Remark: Generated from `#/paths/stations/GET/query/country`.
                internal var country: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number to return
                ///   - limit: The number of items to return per page
                ///   - coordinates: The latitude and longitude of the user's location, to narrow down the search results to sites within a proximity of this location.
                ///   - search: A search term to filter the list of stations by name or address.
                ///   - country: Filter stations by country code
                internal init(
                    page: Components.Parameters.Page? = nil,
                    limit: Components.Parameters.Limit? = nil,
                    coordinates: Swift.String? = nil,
                    search: Swift.String? = nil,
                    country: Swift.String? = nil
                ) {
                    self.page = page
                    self.limit = limit
                    self.coordinates = coordinates
                    self.search = search
                    self.country = country
                }
            }
            internal var query: Operations.GetStations.Input.Query
            /// - Remark: Generated from `#/paths/stations/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetStations.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetStations.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetStations.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetStations.Input.Query = .init(),
                headers: Operations.GetStations.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/stations/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/stations/GET/responses/200/headers/Cache-Control`.
                    internal var cacheControl: Components.Headers.CacheControl?
                    /// The RateLimit header communicates quota policies. It contains a `limit` to
                    /// convey the expiring limit, `remaining` to convey the remaining quota units,
                    /// and `reset` to convey the time window reset time.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/stations/GET/responses/200/headers/RateLimit`.
                    internal var rateLimit: Components.Headers.RateLimit?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - cacheControl: The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                    internal init(
                        cacheControl: Components.Headers.CacheControl? = nil,
                        rateLimit: Components.Headers.RateLimit? = nil
                    ) {
                        self.cacheControl = cacheControl
                        self.rateLimit = rateLimit
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.GetStations.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/stations/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value1`.
                        internal var value1: Components.Schemas.WrapperCollection
                        /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value2/data`.
                            internal var data: [Components.Schemas.Station]?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - data:
                            internal init(data: [Components.Schemas.Station]? = nil) {
                                self.data = data
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case data
                            }
                        }
                        /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value2`.
                        internal var value2: Operations.GetStations.Output.Ok.Body.JsonPayload.Value2Payload
                        /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3`.
                        internal struct Value3Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3/links`.
                            internal struct LinksPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3/links/value1`.
                                internal var value1: Components.Schemas.LinksSelf
                                /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3/links/value2`.
                                internal var value2: Components.Schemas.LinksPagination
                                /// Creates a new `LinksPayload`.
                                ///
                                /// - Parameters:
                                ///   - value1:
                                ///   - value2:
                                internal init(
                                    value1: Components.Schemas.LinksSelf,
                                    value2: Components.Schemas.LinksPagination
                                ) {
                                    self.value1 = value1
                                    self.value2 = value2
                                }
                                internal init(from decoder: any Decoder) throws {
                                    self.value1 = try .init(from: decoder)
                                    self.value2 = try .init(from: decoder)
                                }
                                internal func encode(to encoder: any Encoder) throws {
                                    try self.value1.encode(to: encoder)
                                    try self.value2.encode(to: encoder)
                                }
                            }
                            /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3/links`.
                            internal var links: Operations.GetStations.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload?
                            /// Creates a new `Value3Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Operations.GetStations.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/json/value3`.
                        internal var value3: Operations.GetStations.Output.Ok.Body.JsonPayload.Value3Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        internal init(
                            value1: Components.Schemas.WrapperCollection,
                            value2: Operations.GetStations.Output.Ok.Body.JsonPayload.Value2Payload,
                            value3: Operations.GetStations.Output.Ok.Body.JsonPayload.Value3Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                            self.value3 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                            try self.value3.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/application\/json`.
                    case json(Operations.GetStations.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetStations.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/stations/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetStations.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.GetStations.Output.Ok.Headers = .init(),
                    body: Operations.GetStations.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetStations.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetStations.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//stations/get(get-stations)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// Get available train trips
    ///
    /// Returns a list of available train trips between the specified origin and destination stations on the given date, and allows for filtering by bicycle and dog allowances.
    ///
    ///
    /// - Remark: HTTP `GET /trips`.
    /// - Remark: Generated from `#/paths//trips/get(get-trips)`.
    internal enum GetTrips {
        internal static let id: Swift.String = "get-trips"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/trips/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The page number to return
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/page`.
                internal var page: Components.Parameters.Page?
                /// The number of items to return per page
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/limit`.
                internal var limit: Components.Parameters.Limit?
                /// The ID of the origin station
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/origin`.
                internal var origin: Swift.String
                /// The ID of the destination station
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/destination`.
                internal var destination: Swift.String
                /// The date and time of the trip in ISO 8601 format in origin station's timezone.
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/date`.
                internal var date: Foundation.Date
                /// Only return trips where bicycles are known to be allowed
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/bicycles`.
                internal var bicycles: Swift.Bool?
                /// Only return trips where dogs are known to be allowed
                ///
                /// - Remark: Generated from `#/paths/trips/GET/query/dogs`.
                internal var dogs: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number to return
                ///   - limit: The number of items to return per page
                ///   - origin: The ID of the origin station
                ///   - destination: The ID of the destination station
                ///   - date: The date and time of the trip in ISO 8601 format in origin station's timezone.
                ///   - bicycles: Only return trips where bicycles are known to be allowed
                ///   - dogs: Only return trips where dogs are known to be allowed
                internal init(
                    page: Components.Parameters.Page? = nil,
                    limit: Components.Parameters.Limit? = nil,
                    origin: Swift.String,
                    destination: Swift.String,
                    date: Foundation.Date,
                    bicycles: Swift.Bool? = nil,
                    dogs: Swift.Bool? = nil
                ) {
                    self.page = page
                    self.limit = limit
                    self.origin = origin
                    self.destination = destination
                    self.date = date
                    self.bicycles = bicycles
                    self.dogs = dogs
                }
            }
            internal var query: Operations.GetTrips.Input.Query
            /// - Remark: Generated from `#/paths/trips/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTrips.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetTrips.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetTrips.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetTrips.Input.Query,
                headers: Operations.GetTrips.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/trips/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/trips/GET/responses/200/headers/Cache-Control`.
                    internal var cacheControl: Components.Headers.CacheControl?
                    /// The RateLimit header communicates quota policies. It contains a `limit` to
                    /// convey the expiring limit, `remaining` to convey the remaining quota units,
                    /// and `reset` to convey the time window reset time.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/trips/GET/responses/200/headers/RateLimit`.
                    internal var rateLimit: Components.Headers.RateLimit?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - cacheControl: The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                    internal init(
                        cacheControl: Components.Headers.CacheControl? = nil,
                        rateLimit: Components.Headers.RateLimit? = nil
                    ) {
                        self.cacheControl = cacheControl
                        self.rateLimit = rateLimit
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.GetTrips.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value1`.
                        internal var value1: Components.Schemas.WrapperCollection
                        /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/DataPayload`.
                            internal struct DataPayloadPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/DataPayload/value1`.
                                internal var value1: Components.Schemas.Trip
                                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/DataPayload/value2`.
                                internal var value2: Components.Schemas.LinksOrigin
                                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/DataPayload/value3`.
                                internal var value3: Components.Schemas.LinksDestination
                                /// Creates a new `DataPayloadPayload`.
                                ///
                                /// - Parameters:
                                ///   - value1:
                                ///   - value2:
                                ///   - value3:
                                internal init(
                                    value1: Components.Schemas.Trip,
                                    value2: Components.Schemas.LinksOrigin,
                                    value3: Components.Schemas.LinksDestination
                                ) {
                                    self.value1 = value1
                                    self.value2 = value2
                                    self.value3 = value3
                                }
                                internal init(from decoder: any Decoder) throws {
                                    self.value1 = try .init(from: decoder)
                                    self.value2 = try .init(from: decoder)
                                    self.value3 = try .init(from: decoder)
                                }
                                internal func encode(to encoder: any Encoder) throws {
                                    try self.value1.encode(to: encoder)
                                    try self.value2.encode(to: encoder)
                                    try self.value3.encode(to: encoder)
                                }
                            }
                            /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/data`.
                            internal typealias DataPayload = [Operations.GetTrips.Output.Ok.Body.JsonPayload.Value2Payload.DataPayloadPayload]
                            /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2/data`.
                            internal var data: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value2Payload.DataPayload?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - data:
                            internal init(data: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value2Payload.DataPayload? = nil) {
                                self.data = data
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case data
                            }
                        }
                        /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value2`.
                        internal var value2: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value2Payload
                        /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3`.
                        internal struct Value3Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3/links`.
                            internal struct LinksPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3/links/value1`.
                                internal var value1: Components.Schemas.LinksSelf
                                /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3/links/value2`.
                                internal var value2: Components.Schemas.LinksPagination
                                /// Creates a new `LinksPayload`.
                                ///
                                /// - Parameters:
                                ///   - value1:
                                ///   - value2:
                                internal init(
                                    value1: Components.Schemas.LinksSelf,
                                    value2: Components.Schemas.LinksPagination
                                ) {
                                    self.value1 = value1
                                    self.value2 = value2
                                }
                                internal init(from decoder: any Decoder) throws {
                                    self.value1 = try .init(from: decoder)
                                    self.value2 = try .init(from: decoder)
                                }
                                internal func encode(to encoder: any Encoder) throws {
                                    try self.value1.encode(to: encoder)
                                    try self.value2.encode(to: encoder)
                                }
                            }
                            /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3/links`.
                            internal var links: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload?
                            /// Creates a new `Value3Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/json/value3`.
                        internal var value3: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value3Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        internal init(
                            value1: Components.Schemas.WrapperCollection,
                            value2: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value2Payload,
                            value3: Operations.GetTrips.Output.Ok.Body.JsonPayload.Value3Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                            self.value3 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                            try self.value3.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/application\/json`.
                    case json(Operations.GetTrips.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetTrips.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/trips/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetTrips.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.GetTrips.Output.Ok.Headers = .init(),
                    body: Operations.GetTrips.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A list of available train trips
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetTrips.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetTrips.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//trips/get(get-trips)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// List existing bookings
    ///
    /// Returns a list of all trip bookings by the authenticated user.
    ///
    /// - Remark: HTTP `GET /bookings`.
    /// - Remark: Generated from `#/paths//bookings/get(get-bookings)`.
    internal enum GetBookings {
        internal static let id: Swift.String = "get-bookings"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookings/GET/query`.
            internal struct Query: Sendable, Hashable {
                /// The page number to return
                ///
                /// - Remark: Generated from `#/paths/bookings/GET/query/page`.
                internal var page: Components.Parameters.Page?
                /// The number of items to return per page
                ///
                /// - Remark: Generated from `#/paths/bookings/GET/query/limit`.
                internal var limit: Components.Parameters.Limit?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - page: The page number to return
                ///   - limit: The number of items to return per page
                internal init(
                    page: Components.Parameters.Page? = nil,
                    limit: Components.Parameters.Limit? = nil
                ) {
                    self.page = page
                    self.limit = limit
                }
            }
            internal var query: Operations.GetBookings.Input.Query
            /// - Remark: Generated from `#/paths/bookings/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetBookings.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetBookings.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetBookings.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            internal init(
                query: Operations.GetBookings.Input.Query = .init(),
                headers: Operations.GetBookings.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/GET/responses/200/headers/Cache-Control`.
                    internal var cacheControl: Components.Headers.CacheControl?
                    /// The RateLimit header communicates quota policies. It contains a `limit` to
                    /// convey the expiring limit, `remaining` to convey the remaining quota units,
                    /// and `reset` to convey the time window reset time.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/GET/responses/200/headers/RateLimit`.
                    internal var rateLimit: Components.Headers.RateLimit?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - cacheControl: The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                    internal init(
                        cacheControl: Components.Headers.CacheControl? = nil,
                        rateLimit: Components.Headers.RateLimit? = nil
                    ) {
                        self.cacheControl = cacheControl
                        self.rateLimit = rateLimit
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.GetBookings.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value1`.
                        internal var value1: Components.Schemas.WrapperCollection
                        /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value2/data`.
                            internal var data: [Components.Schemas.Booking]?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - data:
                            internal init(data: [Components.Schemas.Booking]? = nil) {
                                self.data = data
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case data
                            }
                        }
                        /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value2`.
                        internal var value2: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value2Payload
                        /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3`.
                        internal struct Value3Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3/links`.
                            internal struct LinksPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3/links/value1`.
                                internal var value1: Components.Schemas.LinksSelf
                                /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3/links/value2`.
                                internal var value2: Components.Schemas.LinksPagination
                                /// Creates a new `LinksPayload`.
                                ///
                                /// - Parameters:
                                ///   - value1:
                                ///   - value2:
                                internal init(
                                    value1: Components.Schemas.LinksSelf,
                                    value2: Components.Schemas.LinksPagination
                                ) {
                                    self.value1 = value1
                                    self.value2 = value2
                                }
                                internal init(from decoder: any Decoder) throws {
                                    self.value1 = try .init(from: decoder)
                                    self.value2 = try .init(from: decoder)
                                }
                                internal func encode(to encoder: any Encoder) throws {
                                    try self.value1.encode(to: encoder)
                                    try self.value2.encode(to: encoder)
                                }
                            }
                            /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3/links`.
                            internal var links: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload?
                            /// Creates a new `Value3Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value3Payload.LinksPayload? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/json/value3`.
                        internal var value3: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value3Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        ///   - value3:
                        internal init(
                            value1: Components.Schemas.WrapperCollection,
                            value2: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value2Payload,
                            value3: Operations.GetBookings.Output.Ok.Body.JsonPayload.Value3Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                            self.value3 = value3
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                            self.value3 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                            try self.value3.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/application\/json`.
                    case json(Operations.GetBookings.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetBookings.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetBookings.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.GetBookings.Output.Ok.Headers = .init(),
                    body: Operations.GetBookings.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// A list of bookings
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetBookings.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetBookings.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//bookings/get(get-bookings)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// Create a booking
    ///
    /// A booking is a temporary hold on a trip. It is not confirmed until the payment is processed.
    ///
    /// - Remark: HTTP `POST /bookings`.
    /// - Remark: Generated from `#/paths//bookings/post(create-booking)`.
    internal enum CreateBooking {
        internal static let id: Swift.String = "create-booking"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookings/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBooking.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBooking.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.CreateBooking.Input.Headers
            /// - Remark: Generated from `#/paths/bookings/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.Booking)
                /// - Remark: Generated from `#/paths/bookings/POST/requestBody/content/application\/xml`.
                case xml(OpenAPIRuntime.HTTPBody)
            }
            internal var body: Operations.CreateBooking.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            internal init(
                headers: Operations.CreateBooking.Input.Headers = .init(),
                body: Operations.CreateBooking.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/json/value1`.
                        internal var value1: Components.Schemas.Booking
                        /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/json/value2/links`.
                            internal var links: Components.Schemas.LinksSelf?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Components.Schemas.LinksSelf? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/json/value2`.
                        internal var value2: Operations.CreateBooking.Output.Created.Body.JsonPayload.Value2Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        internal init(
                            value1: Components.Schemas.Booking,
                            value2: Operations.CreateBooking.Output.Created.Body.JsonPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/application\/json`.
                    case json(Operations.CreateBooking.Output.Created.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.CreateBooking.Output.Created.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/POST/responses/201/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.CreateBooking.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                internal init(body: Operations.CreateBooking.Output.Created.Body) {
                    self.body = body
                }
            }
            /// Booking successful
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.CreateBooking.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            internal var created: Operations.CreateBooking.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Not Found
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Conflict
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Components.Responses.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            internal var conflict: Components.Responses.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//bookings/post(create-booking)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// Get a booking
    ///
    /// Returns the details of a specific booking.
    ///
    /// - Remark: HTTP `GET /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)`.
    internal enum GetBooking {
        internal static let id: Swift.String = "get-booking"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/path`.
            internal struct Path: Sendable, Hashable {
                /// The ID of the booking to retrieve.
                ///
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/path/bookingId`.
                internal var bookingId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - bookingId: The ID of the booking to retrieve.
                internal init(bookingId: Swift.String) {
                    self.bookingId = bookingId
                }
            }
            internal var path: Operations.GetBooking.Input.Path
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetBooking.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetBooking.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.GetBooking.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.GetBooking.Input.Path,
                headers: Operations.GetBooking.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/headers/Cache-Control`.
                    internal var cacheControl: Components.Headers.CacheControl?
                    /// The RateLimit header communicates quota policies. It contains a `limit` to
                    /// convey the expiring limit, `remaining` to convey the remaining quota units,
                    /// and `reset` to convey the time window reset time.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/headers/RateLimit`.
                    internal var rateLimit: Components.Headers.RateLimit?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - cacheControl: The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                    internal init(
                        cacheControl: Components.Headers.CacheControl? = nil,
                        rateLimit: Components.Headers.RateLimit? = nil
                    ) {
                        self.cacheControl = cacheControl
                        self.rateLimit = rateLimit
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.GetBooking.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/json/value1`.
                        internal var value1: Components.Schemas.Booking
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/json/value2/links`.
                            internal var links: Components.Schemas.LinksSelf?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Components.Schemas.LinksSelf? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/json/value2`.
                        internal var value2: Operations.GetBooking.Output.Ok.Body.JsonPayload.Value2Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        internal init(
                            value1: Components.Schemas.Booking,
                            value2: Operations.GetBooking.Output.Ok.Body.JsonPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/application\/json`.
                    case json(Operations.GetBooking.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.GetBooking.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/GET/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    internal var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.GetBooking.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.GetBooking.Output.Ok.Headers = .init(),
                    body: Operations.GetBooking.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// The booking details
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetBooking.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.GetBooking.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not Found
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/get(get-booking)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .xml,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// Delete a booking
    ///
    /// Deletes a booking, cancelling the hold on the trip.
    ///
    /// - Remark: HTTP `DELETE /bookings/{bookingId}`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)`.
    internal enum DeleteBooking {
        internal static let id: Swift.String = "delete-booking"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/DELETE/path`.
            internal struct Path: Sendable, Hashable {
                /// The ID of the booking to retrieve.
                ///
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/DELETE/path/bookingId`.
                internal var bookingId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - bookingId: The ID of the booking to retrieve.
                internal init(bookingId: Swift.String) {
                    self.bookingId = bookingId
                }
            }
            internal var path: Operations.DeleteBooking.Input.Path
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/DELETE/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteBooking.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteBooking.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.DeleteBooking.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            internal init(
                path: Operations.DeleteBooking.Input.Path,
                headers: Operations.DeleteBooking.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                internal init() {}
            }
            /// Booking deleted
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteBooking.Output.NoContent)
            /// Booking deleted
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            internal static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            internal var noContent: Operations.DeleteBooking.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Not Found
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Components.Responses.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            internal var notFound: Components.Responses.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/delete(delete-booking)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
    /// Pay for a Booking
    ///
    /// A payment is an attempt to pay for the booking, which will confirm the booking for the user and enable them to get their tickets.
    ///
    /// - Remark: HTTP `POST /bookings/{bookingId}/payment`.
    /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)`.
    internal enum CreateBookingPayment {
        internal static let id: Swift.String = "create-booking-payment"
        internal struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/path`.
            internal struct Path: Sendable, Hashable {
                /// The ID of the booking to pay for.
                ///
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/path/bookingId`.
                internal var bookingId: Swift.String
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - bookingId: The ID of the booking to pay for.
                internal init(bookingId: Swift.String) {
                    self.bookingId = bookingId
                }
            }
            internal var path: Operations.CreateBookingPayment.Input.Path
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/header`.
            internal struct Headers: Sendable, Hashable {
                internal var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBookingPayment.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                internal init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.CreateBookingPayment.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            internal var headers: Operations.CreateBookingPayment.Input.Headers
            /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/requestBody`.
            internal enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.BookingPayment)
            }
            internal var body: Operations.CreateBookingPayment.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            internal init(
                path: Operations.CreateBookingPayment.Input.Path,
                headers: Operations.CreateBookingPayment.Input.Headers = .init(),
                body: Operations.CreateBookingPayment.Input.Body
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        internal enum Output: Sendable, Hashable {
            internal struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/headers`.
                internal struct Headers: Sendable, Hashable {
                    /// The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    /// It is used to specify the caching directives in responses to prevent caches from storing sensitive information.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/headers/Cache-Control`.
                    internal var cacheControl: Components.Headers.CacheControl?
                    /// The RateLimit header communicates quota policies. It contains a `limit` to
                    /// convey the expiring limit, `remaining` to convey the remaining quota units,
                    /// and `reset` to convey the time window reset time.
                    ///
                    ///
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/headers/RateLimit`.
                    internal var rateLimit: Components.Headers.RateLimit?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - cacheControl: The Cache-Control header communicates directives for caching mechanisms in both requests and responses. 
                    ///   - rateLimit: The RateLimit header communicates quota policies. It contains a `limit` to
                    internal init(
                        cacheControl: Components.Headers.CacheControl? = nil,
                        rateLimit: Components.Headers.RateLimit? = nil
                    ) {
                        self.cacheControl = cacheControl
                        self.rateLimit = rateLimit
                    }
                }
                /// Received HTTP response headers
                internal var headers: Operations.CreateBookingPayment.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content`.
                internal enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/json`.
                    internal struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/json/value1`.
                        internal var value1: Components.Schemas.BookingPayment
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/json/value2`.
                        internal struct Value2Payload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/json/value2/links`.
                            internal var links: Components.Schemas.LinksBooking?
                            /// Creates a new `Value2Payload`.
                            ///
                            /// - Parameters:
                            ///   - links:
                            internal init(links: Components.Schemas.LinksBooking? = nil) {
                                self.links = links
                            }
                            internal enum CodingKeys: String, CodingKey {
                                case links
                            }
                        }
                        /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/json/value2`.
                        internal var value2: Operations.CreateBookingPayment.Output.Ok.Body.JsonPayload.Value2Payload
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - value1:
                        ///   - value2:
                        internal init(
                            value1: Components.Schemas.BookingPayment,
                            value2: Operations.CreateBookingPayment.Output.Ok.Body.JsonPayload.Value2Payload
                        ) {
                            self.value1 = value1
                            self.value2 = value2
                        }
                        internal init(from decoder: any Decoder) throws {
                            self.value1 = try .init(from: decoder)
                            self.value2 = try .init(from: decoder)
                        }
                        internal func encode(to encoder: any Encoder) throws {
                            try self.value1.encode(to: encoder)
                            try self.value2.encode(to: encoder)
                        }
                    }
                    /// - Remark: Generated from `#/paths/bookings/{bookingId}/payment/POST/responses/200/content/application\/json`.
                    case json(Operations.CreateBookingPayment.Output.Ok.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    internal var json: Operations.CreateBookingPayment.Output.Ok.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                internal var body: Operations.CreateBookingPayment.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                internal init(
                    headers: Operations.CreateBookingPayment.Output.Ok.Headers = .init(),
                    body: Operations.CreateBookingPayment.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// Payment successful
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.CreateBookingPayment.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            internal var ok: Operations.CreateBookingPayment.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Bad Request
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/400`.
            ///
            /// HTTP response code: `400 badRequest`.
            case badRequest(Components.Responses.BadRequest)
            /// The associated value of the enum case if `self` is `.badRequest`.
            ///
            /// - Throws: An error if `self` is not `.badRequest`.
            /// - SeeAlso: `.badRequest`.
            internal var badRequest: Components.Responses.BadRequest {
                get throws {
                    switch self {
                    case let .badRequest(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "badRequest",
                            response: self
                        )
                    }
                }
            }
            /// Unauthorized
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Components.Responses.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            internal var unauthorized: Components.Responses.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            /// Forbidden
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Components.Responses.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            internal var forbidden: Components.Responses.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            /// Too Many Requests
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Components.Responses.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            internal var tooManyRequests: Components.Responses.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            /// Internal Server Error
            ///
            /// - Remark: Generated from `#/paths//bookings/{bookingId}/payment/post(create-booking-payment)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Components.Responses.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            internal var internalServerError: Components.Responses.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        internal enum AcceptableContentType: AcceptableProtocol {
            case json
            case applicationProblemJson
            case applicationProblemXml
            case other(Swift.String)
            internal init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/problem+json":
                    self = .applicationProblemJson
                case "application/problem+xml":
                    self = .applicationProblemXml
                default:
                    self = .other(rawValue)
                }
            }
            internal var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .applicationProblemJson:
                    return "application/problem+json"
                case .applicationProblemXml:
                    return "application/problem+xml"
                }
            }
            internal static var allCases: [Self] {
                [
                    .json,
                    .applicationProblemJson,
                    .applicationProblemXml
                ]
            }
        }
    }
}
